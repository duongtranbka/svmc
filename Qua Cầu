Có 1 số cây cầu làm bằng gỗ. Trải qua 1 thời gian,những  cây cầu trở nên hư hại và xuất hiện những lỗ thủng trên đó. Được biết những cây cầu đó luôn có độ rộng M = 5(bước đi) và độ dài trong khoảng3

Công việc:

Có 1 người luôn luôn đứng giữa ở 1 phía của cây cầu. Nhiệm vụ của bạn là phải đưa người đó qua được cầu với số đồng xu nhặt được là lớn nhất. Được biết trên cầu có 1 số đồng xu bị đánh rơi và người đó chỉ có thể đi thẳng, đi chéo trái hoặc đi chéo phải. Ngoài ra người đó có mang 1 tấm ván. Nó có thể vá được 1 lỗ thủng trên cầu giúp người đó có thể đi qua được.

Lưu ý : không có nhiều hơn 1 đồng xu tại 1 địa điểm.

 

Input

Dòng đầu tiên là số lượng trường hợp thử nghiệm.

Dòng thứ 2 chiều dài của cây cầu (N).

N dòng tiếp theo mô tả cây cầu theo ma trận 2 chiều. Trong đó: ‘0’ là có thể đi được, ‘1’ là có đồng xu(có thể đi được)và ‘2’ là lỗ thủng.

 

Output

In theo định dạng  “#test_case” và số đồng xu nhiều nhất có thể khi qua đươc cầu.

Nếu không thể qua cầu in ra  -1.
3



7



1 2 0 1 0



0 0 2 0 1



0 1 0 2 1



1 0 0 0 1



0 0 0 2 2



2 0 1 0 1



0 1 2 2 0



10



2 2 2 2 0



1 2 0 0 2



0 2 0 0 0



2 2 0 2 2



0 2 2 2 0



0 0 0 0 0



1 0 0 0 2



0 0 0 0 0



2 2 0 2 1



0 2 2 2 0



9



0 2 1 1 2



0 2 2 2 2



2 2 2 1 0



0 0 2 0 2



0 2 2 1 0



1 0 2 2 2



2 2 0 2 0



2 2 2 0 2



0 0 2 0 0



 



Output



#1 6



#2 -1



#3 0
///
#include <iostream>
using namespace std;
int n,map[30][5],result,sobuoc;
int dx[3]={-1,-1,-1};
int dy[3]={-1,0,1};
void backtrack(int x, int y, int sum, int steps, int dem)
{
	for(int i=0;i<3;i++)
	{
		int aa=x+dx[i];
		int bb=y+dy[i];
		if(aa>=0 && aa<n && bb >=0 && bb <5)
		{
			if(map[aa][bb] == 0)
			{
				backtrack(aa,bb,sum,steps+1,dem);
			}
			if(map[aa][bb] == 1)
			{
				backtrack(aa,bb,sum+1,steps+1,dem);
			}
			if(map[aa][bb] == 2 && dem ==1)
			{
				backtrack(aa,bb,sum,steps+1,dem-1);
			}
		}
	}
	if(sum>result && steps == n)
	{
		result=sum;
	}
	if(steps>sobuoc)
	{
		sobuoc=steps;
	}
}
int main()
{
	//freopen("input.txt","r",stdin);
	int t;
	cin>>t;
	for(int tc=1;tc<=t;tc++)
	{
		cin>>n;
		result=0;
		sobuoc=0;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<5;j++)
			{
				cin>>map[i][j];
			}
		}
		backtrack(n,2,0,0,1);
		cout<<"#"<<tc <<" ";
		if(sobuoc == n)
		{
			cout<<result<<endl;
		}else
		{
			cout<<"-1"<<endl;
		}
	}
	return 0;
}
