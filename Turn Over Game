As in , there is a 4×4 sized table. In a grid of the table, there are white or black stones. When you choose a position of stone randomly, the stone and four stones adjacent to the up, down, left and right sides of the stone will turn to the opposite color like turning a white stone to a black & a black stone to a white. Let’s suppose this process as a calculation
 Using such a calculation, you want to change all the stones on the table into all whites or all blacks. Find out the minimum operation count at this time.

Time limit: 1 second (java: 2 seconds)

[Input]
Several test cases can be included in the inputs. T, the number of cases is given in the first row of the inputs. After that, the test cases as many as T (T ≤ 30) are given in a row.
Table info is given without blank over four rows per each test case. Colors are indicated like white for ‘w’ and black for ‘b’.

[Output]
Output the minimum operation count to change all colors as white or black on the first row per each test case. If not possible, output "impossible" .

[I/O Example]
Input
2
bwwb
bbwb
bwwb
bwww
bwbw
wwww
bbwb
bwwb

Output
Case #1 

4 

Case #2﻿
impossible

//
#include <iostream>
using namespace std;
char c[5][5];
int a[5][5],aa,bb,result;
int dx[4]={-1,0,1,0};
int dy[4]={0,1,0,-1};
bool visited[10][10];
void changebw(int x, int y)
{
	if(a[x][y] == 0)
	{
		a[x][y] =1;
	}else
	{
		a[x][y]=0;
	}
	for(int i=0;i<4;i++)
	{
		aa=x+dx[i];
		bb=y+dy[i];
		if(aa>=0 && aa<4 && bb >=0 && bb<4)
		{
			if(a[aa][bb] == 0)
			{
				a[aa][bb]=1;
			}
			else
			{
				a[aa][bb]=0;
			}
		}
	}
}
bool checkresult()
{
	int check =0;
	for(int i=0;i<4;i++)
	{
		for(int j=0;j<4;j++)
		{
			if(a[i][j]!= a[0][0])
			{
				check++;
				break;
			}
		}
		if(check != 0)
		{
			break;
		}
	}
	if(check == 0)
	{
		return true;
	}else
	{
		return false;
	}
}
void backtrack(int k, int dem)
{

	if(k== 16)
	{
			if(checkresult()==true)
		{
			if(dem>result)
			{
				result= dem;
			}
			return ;
		}else
		return ;
	}
	
			backtrack(k+1,dem);
			changebw(k/4,k%4);
			backtrack(k+1,dem+1);
			changebw(k/4,k%4);
	
}
int main()
{
	freopen("input.txt","r",stdin);
	int t;
	cin>>t;
	for(int tc=1;tc<=t;tc++)
	{
		for(int i=0;i<4;i++)
		{
			for(int j=0;j<4;j++)
			{
				cin>>c[i][j];
				if(c[i][j] == 'b')
				{
					a[i][j] = 0;
				}else if(c[i][j] == 'w')
				{
					a[i][j] = 1;
				}
				//cout<<a[i][j]<< " ";
			}
			//cout<<"\n";
		}
		result=0;
		backtrack(0,0);
		cout<<"Case #"<<tc<<endl;
		if(result == 0)
		{
			cout<<"impossible"<<endl;
		}else
		{
			cout<<result/3<<endl;
		}
	}
	return 0;
}


cach 2

#include <iostream>
using namespace std;
#define MAXN 4

int A[MAXN][MAXN];
int B[MAXN][MAXN];
//int N;

bool check() {
	for(int i = 0; i < MAXN; i++)
		for(int j = 0; j < MAXN; j++)
			if(A[i][j] != A[0][0])
				return false;

	return true;
}

void bam(int p) {
	int x = p/MAXN;
	int y = p%MAXN;
	A[x][y] = 1 - A[x][y];
	if(x+1 < MAXN) A[x+1][y] = 1 - A[x+1][y];
	if(x-1 >= 0) A[x-1][y] = 1 - A[x-1][y];
	if(y+1 < MAXN) A[x][y+1] = 1 - A[x][y+1];
	if(y-1 >= 0) A[x][y-1] = 1 - A[x][y-1];
}

int cntB;
void bamB(int p) {
	cntB++;
	int x = p/MAXN;
	int y = p%MAXN;
	B[x][y] = 1 - B[x][y];
	if(x+1 < MAXN) B[x+1][y] = 1 - B[x+1][y];
	if(x-1 >= 0) B[x-1][y] = 1 - B[x-1][y];
	if(y+1 < MAXN) B[x][y+1] = 1 - B[x][y+1];
	if(y-1 >= 0) B[x][y-1] = 1 - B[x][y-1];
}

bool bamAll(int value) {
	for(int i = 0; i < MAXN; i++)
		for(int j = 0; j < MAXN; j++)
			B[i][j] = A[i][j];

	cntB = 0;
	for(int i = 0; i < MAXN-1; i++) {
		for(int j = 0; j < MAXN; j++) {
			if(B[i][j] != value) bamB((i+1)*MAXN + j);
		}
	}

	for(int j = 0; j < MAXN; j++) 
		if(B[MAXN-1][j] != value) return false;

	return true;
}
int cnt = 0;
int KQ = 0;
void turnOverGame(int i) {
	if(i == MAXN) {
		if(bamAll(0)) {
			if(KQ > cnt+cntB) KQ = cnt+cntB;
		}
		if(bamAll(1)) {
			if(KQ > cnt+cntB) KQ = cnt+cntB;
		}
		return;
	}

	//khong bam
	turnOverGame(i+1);

	//bam
	cnt++;
	bam(i);
	turnOverGame(i+1);
	bam(i);
	cnt--;
}
int main(){
	//freopen("input.txt", "r", stdin);
	int T;
	cin >> T;
	char c;
	for(int tc = 1; tc <= T; tc++) {
		//cin >> N;
		for(int i = 0; i < MAXN; i++)
			for(int j = 0; j < MAXN; j++) {
				cin >> c;
				if(c == 'b') A[i][j] = 0;
				else A[i][j] = 1;
			}
		
		KQ = MAXN*MAXN*MAXN;
		turnOverGame(0);
		cout << "Case #"<< tc << endl;
		if(KQ == MAXN*MAXN*MAXN)
			cout << "impossible" << endl;
		else 
			cout << KQ << endl;
	}
	return 0;
}
